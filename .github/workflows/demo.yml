name: Actions

on:
  pull_request: {}
  push: { branches: [main] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library

      # # Test
      # - name: Run tests
      #   uses: webbertakken/unity-test-runner@v1.3
      #   with:
      #     unityVersion: 2020.1.17f1

      # Build
      - name: Build StandaloneWindows
        uses: webbertakken/unity-builder@v0.10
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: 2020.1.13f1
          targetPlatform: StandaloneWindows

      # # Build
      # - name: Build WebGL
      #   uses: webbertakken/unity-builder@v0.10
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #   with:
      #     unityVersion: 2020.1.13f1
      #     targetPlatform: WebGL

      - uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
            zip --junk-paths my-artifact README.md
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
            route: GET /repos/:repository/releases/latest
            repository: ${{ github.repository }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env: 
            response:  ${{ steps.get_latest_release.outputs.data }}
      
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The URL for uploading assets to the release
          upload_url:  ${{steps.get_upload_url.outputs.url}}
          # The path to the asset you want to upload
          asset_path: ./my-artifact.zip
          # The name of the asset you want to upload
          asset_name: my-artifact.zip
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/zip

      # # Output
      # - uses: actions/upload-artifact@v1
      #   id: upload_artifact
      #   with:
      #     name: Build
      #     path: build

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # artifacts: "${{ steps.upload_artifact.name }}.zip"
      #     #"${{ steps.upload_artifact.FATENAME }}.zip"
      #     tag_name: latest
      #     #${{ github.event.release.tag_name }}
      #     # ${{ github.ref }}
      #     release_name: Release ${{ github.run_number }}
      #     draft: false
      #     prerelease: false

      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: build
      #     asset_name: Build
      #     asset_content_type: application/zip