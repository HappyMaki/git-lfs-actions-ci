name: Actions

on:
  pull_request: {}
  push: { branches: [main] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  job1:
    name: Checkout Repository #Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library

  job2:
    name: Edit and Play Mode Tests 
    runs-on: ubuntu-latest
    steps:
      - name: Run tests
        uses: webbertakken/unity-test-runner@v1.7
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: 2020.1.13f1
          customParameters: '-nographics' # <--- This is the important bit
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: artifacts

      - name: Build StandaloneWindows
        uses: webbertakken/unity-builder@v0.10
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: 2020.1.13f1
          targetPlatform: StandaloneWindows
          buildName: build

      - name: Zip project # This would actually build your project, using zip for an example artifact
        run: |
            zip -r build.zip build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.${{github.run_number}}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build.zip
          asset_name: Build.zip
          asset_content_type: application/zip


      - name: send custom message with args
        if: ${{ success() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.WEBHOOK_ID }}
          webhook_token: ${{ secrets.WEBHOOK_TOKEN }}
          args: Build and Unit Tests were successful. For more details... ${{ steps.create_release.outputs.html_url }} 

      - name: send custom message with args
        if: ${{ failure() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.WEBHOOK_ID }}
          webhook_token: ${{ secrets.WEBHOOK_TOKEN }}
          args: FAILURE SENPAI! FAILURE. For more details... $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      